#!/usr/bin/env python3

"""
asmballoon - Reclaims ASM diskgroup space by creating balloon files
Copyright (c) 2024 - Bart Sjerps <bart@dirty-cache.com>
License: GPLv3+
"""

import os, logging, argparse, tempfile, logging
from subprocess import Popen, PIPE

logging.basicConfig(level=logging.DEBUG,
    format="%(asctime)s %(levelname)-8s: %(message)s",
    datefmt='%Y-%m-%d %I:%M:%S')

tmpdir  = tempfile.TemporaryDirectory(prefix="asmb_")
tempdir = tmpdir.name

sql_header = """\
SET tab off feedback off verify off heading off lines 1000 pages 0 trims on serveroutput on
WHENEVER SQLERROR EXIT SQL.SQLCODE
"""

sql_progress = """\
SELECT round(100*sofar/totalwork) percent, time_remaining remaining
FROM   v$session_longops
WHERE  message LIKE '%BALLOON%'
AND    sofar/totalwork < 1;
"""

sql_inflate = """\
CREATE OR REPLACE DIRECTORY balloonsrc AS '{tempdir}';
CREATE OR REPLACE DIRECTORY balloondir as '+{dg}/balloon';
ALTER DISKGROUP {dg} ADD DIRECTORY '+{dg}/BALLOON';
EXEC DBMS_FILE_TRANSFER.COPY_FILE('balloonsrc','balloon','balloondir','BALLOON');
DROP DIRECTORY balloondir;
DROP DIRECTORY balloonsrc;
"""

sql_dropfile = "ALTER DISKGROUP {dg} DROP FILE '+{dg}/BALLOON/BALLOON';"
sql_dropdir  = "ALTER DISKGROUP {dg} DROP DIRECTORY '+{dg}/BALLOON';"

def exception_handler(func):
    def inner(*args, **kwargs):
        try:
            func(*args, **kwargs)
        except ValueError:
            pass
    return inner

class Balloon():
    def __init__(self, diskgroup):
        self.diskgroup = diskgroup.upper()
        try:
            self.orahome   = os.environ['ORACLE_HOME']
            self.sid       = os.environ['ORACLE_SID']
        except KeyError:
            raise ValueError("Environment not set")

        proc = Popen(['/usr/bin/pgrep', '-x', 'ora_pmon_' + self.sid], env={}, stdout=PIPE)
        proc.communicate()
        if not proc.returncode == 0:
            raise ValueError(f"Instance {self.sid} not running")

    def sqlplus(self):
        env      = dict(ORACLE_HOME=self.orahome, ORACLE_SID=self.sid)
        sqlplus  = os.path.join(self.orahome, 'bin/sqlplus')
        cmd      = [sqlplus, '-L','-S','/','as','sysdba']
        proc     = Popen(cmd, env=env, stdin=PIPE, stdout=PIPE, stderr=PIPE, encoding='utf-8')
        out, _   = proc.communicate(sql_header + sql)
        if proc.returncode:
            logging.error(out)
            raise ValueError(f'SQLPLUS failed, rc={proc.returncode}')
        else:
            return out

    @exception_handler
    def dropfile(self):
        sysdba(sql_dropfile.format(dg=self.diskgroup))

    @exception_handler
    def dropdir(self):
        sysdba(sql_dropdir.format(dg=self.diskgroup))

    def inflate(self):
        logging.info(f"Inflating {self.diskgroup}")
        sysdba(sql_inflate.format(dg=self.diskgroup, tempdir=tempdir))

    def deflate(self):
        logging.info(f"Deflating {self.diskgroup}")
        self.dropfile()
        self.dropdir()

    @staticmethod
    def mkballoon(size_mb):
        logging.info(f"Creating {size_mb} MiB balloon file")
        pfile  = os.path.join(tempdir, 'init.ora')
        spfile = os.path.join(tempdir, 'balloon')
        with open(pfile, 'w') as f:
            f.write("*.compatible='11.1.0.2.0'\n")

        sysdba(f"CREATE SPFILE='{spfile}' from pfile='{pfile}';")
        os.truncate(spfile, size_mb * 2**20)

    def dgstats(self):
        result = sysdba(f"SELECT free_mb, total_mb FROM v$asm_diskgroup WHERE name = '{self.diskgroup}';")
        f, t = result.split()
        return int(f), int(t)

    def disks(self):
        r = sysdba(f"SELECT path FROM v$asm_disk JOIN v$asm_diskgroup dg USING (group_number) WHERE dg.name = '{self.diskgroup}';")
        disks = r.splitlines()
        for disk in disks:
            d = os.path.realpath(disk)
            s = os.stat(d)
            print(os.major(s.st_rdev))
            print(os.minor(s.st_rdev))
            print(s)

def progress(args):
    r = sysdba(sql_progress)
    print(r)

def running(sid):
    proc = Popen(['/usr/bin/pgrep', '-x', 'ora_pmon_'+sid], env={}, stdout=PIPE)
    proc.communicate()
    if proc.returncode == 0:
        return True
    return False

def sysdba(sql):
    orahome  = os.environ['ORACLE_HOME']
    sid      = os.environ['ORACLE_SID']
    if not running(sid):
        raise ValueError("Not running")
    env      = dict(ORACLE_HOME=orahome, ORACLE_SID=sid)
    sqlplus  = os.path.join(orahome, 'bin/sqlplus')
    cmd      = [sqlplus, '-L','-S','/','as','sysdba']
    proc     = Popen(cmd, env=env, stdin=PIPE, stdout=PIPE, stderr=PIPE, encoding='utf-8')
    out, err = proc.communicate(sql_header + sql)
    if proc.returncode:
        logging.error(out)
        raise ValueError(f'SQLPLUS failed, rc={proc.returncode}')
    else:
        return out.strip()

def reclaim(args):
    balloon = Balloon(args.diskgroup)

    free_mb, total_mb = balloon.dgstats()
    logging.info(f'Size: {total_mb} MiB')
    logging.info(f'Free: {free_mb} MiB')

    if args.minpct:
        sz = round(free_mb - (args.minpct * total_mb / 100))

    elif args.minfree:
        sz = free_mb - args.minfree

    if sz < 0:
        raise ValueError('Balloon size must be less than amount of free space')

    balloon.mkballoon(sz)
    balloon.inflate()
    free_mb, total_mb = balloon.dgstats()
    logging.info(f'Size: {total_mb} MiB')
    logging.info(f'Free: {free_mb} MiB')

    if not args.keep:
        balloon.deflate()

def cleanup(args):
    balloon = Balloon(args.diskgroup)
    balloon.deflate()

def main():
    parser = argparse.ArgumentParser(formatter_class = lambda prog: argparse.HelpFormatter(prog, max_help_position=40))
    parser.add_argument('-D', '--debug', action="store_true", help='Show debug output')
    subparsers = parser.add_subparsers(title='commands', dest='cmd')

    parent = argparse.ArgumentParser(add_help=False)
    parent.add_argument("diskgroup",  type=str, help="Diskgroup Name")

    parser_reclaim  = subparsers.add_parser('reclaim',  parents=[parent], help='Reclaim space')
    parser_cleanup  = subparsers.add_parser('cleanup',  parents=[parent], help='Cleanup balloon files')
    parser_progress = subparsers.add_parser('progress', help='Show progress')

    group = parser_reclaim.add_mutually_exclusive_group()
    group.add_argument("--minfree",  type=int, metavar='mb',  help="Minimum MB free size, default 100", default=100)
    group.add_argument("--size",     type=int, metavar='mb',  help="Size of balloon file")
    group.add_argument("--minpct",   type=int, metavar='pct', help="Minimum %% free size")
    parser_reclaim.add_argument("--keep",     action="store_true", help="Keep balloon file")

    parser_reclaim.set_defaults(func=reclaim)
    parser_cleanup.set_defaults(func=cleanup)
    parser_progress.set_defaults(func=progress)

    args   = parser.parse_args()

    if args.debug:
        logger = logging.getLogger()
        logger.setLevel(logging.DEBUG)

    try:
        if args.cmd is None:
            raise ValueError('Specify a command')
        args.func(args)

    except ValueError as e:
        logging.error(e)

    except Exception as e:
        logging.exception(e)

if __name__ == '__main__':
    main()
